
C:\Users\hanna\Desktop\GIBZ\M121\M242\HelloWorld\Build\HelloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800100  00800100  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145b  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d9  00000000  00000000  00001883  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073a  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00002998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000821  00000000  00000000  00002c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c24  00000000  00000000  0000347d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000040a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#define F_CPU 16000000
#include <util\delay.h>
#include <inttypes.h>

int main(void)
{
  a6:	cf 93       	push	r28
	Usart_Init(250000);
  a8:	60 e9       	ldi	r22, 0x90	; 144
  aa:	70 ed       	ldi	r23, 0xD0	; 208
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 7e 00 	call	0xfc	; 0xfc <Usart_Init>
  b4:	ca e0       	ldi	r28, 0x0A	; 10
	
	uint8_t i = 10;
	for (; i < 20; i++)
	{

		Usart_Trace0(1);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 06 01 	call	0x20c	; 0x20c <Usart_Trace0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	83 ed       	ldi	r24, 0xD3	; 211
  c2:	90 e3       	ldi	r25, 0x30	; 48
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x28>
  ce:	00 00       	nop
  d0:	c1 50       	subi	r28, 0x01	; 1
{
	Usart_Init(250000);
	
	
	uint8_t i = 10;
	for (; i < 20; i++)
  d2:	89 f7       	brne	.-30     	; 0xb6 <main+0x10>

		Usart_Trace0(1);
		_delay_ms(1000);
	}
	return 0;
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <EnterAtomic>:
  dc:	f8 94       	cli
  de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_enterAtomicNesting>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_enterAtomicNesting>
  e8:	08 95       	ret

000000ea <LeaveAtomic>:
  ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_enterAtomicNesting>
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_enterAtomicNesting>
  f4:	81 11       	cpse	r24, r1
  f6:	01 c0       	rjmp	.+2      	; 0xfa <LeaveAtomic+0x10>
  f8:	78 94       	sei
  fa:	08 95       	ret

000000fc <Usart_Init>:
  fc:	9b 01       	movw	r18, r22
  fe:	ac 01       	movw	r20, r24
 100:	60 e4       	ldi	r22, 0x40	; 64
 102:	72 e4       	ldi	r23, 0x42	; 66
 104:	8f e0       	ldi	r24, 0x0F	; 15
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 0c 01 	call	0x218	; 0x218 <__udivmodsi4>
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	31 09       	sbc	r19, r1
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	35 83       	std	Z+5, r19	; 0x05
 116:	24 83       	std	Z+4, r18	; 0x04
 118:	88 e1       	ldi	r24, 0x18	; 24
 11a:	81 83       	std	Z+1, r24	; 0x01
 11c:	8e e0       	ldi	r24, 0x0E	; 14
 11e:	82 83       	std	Z+2, r24	; 0x02
 120:	08 95       	ret

00000122 <Usart_PutChar>:
 122:	e0 ec       	ldi	r30, 0xC0	; 192
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	90 81       	ld	r25, Z
 128:	95 ff       	sbrs	r25, 5
 12a:	fd cf       	rjmp	.-6      	; 0x126 <Usart_PutChar+0x4>
 12c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 130:	08 95       	ret

00000132 <__vector_18>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	e0 ec       	ldi	r30, 0xC0	; 192
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	19 c0       	rjmp	.+50     	; 0x182 <__vector_18+0x50>
 150:	26 81       	ldd	r18, Z+6	; 0x06
 152:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <USART_rxBufferIn>
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	8f 71       	andi	r24, 0x1F	; 31
 15c:	90 78       	andi	r25, 0x80	; 128
 15e:	99 23       	and	r25, r25
 160:	24 f4       	brge	.+8      	; 0x16a <__vector_18+0x38>
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	80 6e       	ori	r24, 0xE0	; 224
 166:	9f 6f       	ori	r25, 0xFF	; 255
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_end>
 16e:	89 17       	cp	r24, r25
 170:	41 f0       	breq	.+16     	; 0x182 <__vector_18+0x50>
 172:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <USART_rxBufferIn>
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	ad 5f       	subi	r26, 0xFD	; 253
 17a:	be 4f       	sbci	r27, 0xFE	; 254
 17c:	2c 93       	st	X, r18
 17e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <USART_rxBufferIn>
 182:	80 81       	ld	r24, Z
 184:	88 23       	and	r24, r24
 186:	24 f3       	brlt	.-56     	; 0x150 <__vector_18+0x1e>
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <Usart_PutShort>:
 1a0:	cf 93       	push	r28
 1a2:	c8 2f       	mov	r28, r24
 1a4:	89 2f       	mov	r24, r25
 1a6:	0e 94 91 00 	call	0x122	; 0x122 <Usart_PutChar>
 1aa:	8c 2f       	mov	r24, r28
 1ac:	0e 94 91 00 	call	0x122	; 0x122 <Usart_PutChar>
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <Usart_TraceN>:
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	ec 01       	movw	r28, r24
 1c2:	e6 2e       	mov	r14, r22
 1c4:	f7 2e       	mov	r15, r23
 1c6:	14 2f       	mov	r17, r20
 1c8:	0e 94 6e 00 	call	0xdc	; 0xdc <EnterAtomic>
 1cc:	85 ea       	ldi	r24, 0xA5	; 165
 1ce:	0e 94 91 00 	call	0x122	; 0x122 <Usart_PutChar>
 1d2:	81 2f       	mov	r24, r17
 1d4:	88 6a       	ori	r24, 0xA8	; 168
 1d6:	0e 94 91 00 	call	0x122	; 0x122 <Usart_PutChar>
 1da:	ce 01       	movw	r24, r28
 1dc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Usart_PutShort>
 1e0:	cf ef       	ldi	r28, 0xFF	; 255
 1e2:	c1 0f       	add	r28, r17
 1e4:	11 16       	cp	r1, r17
 1e6:	4c f4       	brge	.+18     	; 0x1fa <Usart_TraceN+0x46>
 1e8:	0e 2d       	mov	r16, r14
 1ea:	1f 2d       	mov	r17, r15
 1ec:	f8 01       	movw	r30, r16
 1ee:	81 91       	ld	r24, Z+
 1f0:	8f 01       	movw	r16, r30
 1f2:	0e 94 91 00 	call	0x122	; 0x122 <Usart_PutChar>
 1f6:	c1 50       	subi	r28, 0x01	; 1
 1f8:	c8 f7       	brcc	.-14     	; 0x1ec <Usart_TraceN+0x38>
 1fa:	0e 94 75 00 	call	0xea	; 0xea <LeaveAtomic>
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	08 95       	ret

0000020c <Usart_Trace0>:
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	0e 94 da 00 	call	0x1b4	; 0x1b4 <Usart_TraceN>
 216:	08 95       	ret

00000218 <__udivmodsi4>:
 218:	a1 e2       	ldi	r26, 0x21	; 33
 21a:	1a 2e       	mov	r1, r26
 21c:	aa 1b       	sub	r26, r26
 21e:	bb 1b       	sub	r27, r27
 220:	fd 01       	movw	r30, r26
 222:	0d c0       	rjmp	.+26     	; 0x23e <__udivmodsi4_ep>

00000224 <__udivmodsi4_loop>:
 224:	aa 1f       	adc	r26, r26
 226:	bb 1f       	adc	r27, r27
 228:	ee 1f       	adc	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	a2 17       	cp	r26, r18
 22e:	b3 07       	cpc	r27, r19
 230:	e4 07       	cpc	r30, r20
 232:	f5 07       	cpc	r31, r21
 234:	20 f0       	brcs	.+8      	; 0x23e <__udivmodsi4_ep>
 236:	a2 1b       	sub	r26, r18
 238:	b3 0b       	sbc	r27, r19
 23a:	e4 0b       	sbc	r30, r20
 23c:	f5 0b       	sbc	r31, r21

0000023e <__udivmodsi4_ep>:
 23e:	66 1f       	adc	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	88 1f       	adc	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	1a 94       	dec	r1
 248:	69 f7       	brne	.-38     	; 0x224 <__udivmodsi4_loop>
 24a:	60 95       	com	r22
 24c:	70 95       	com	r23
 24e:	80 95       	com	r24
 250:	90 95       	com	r25
 252:	9b 01       	movw	r18, r22
 254:	ac 01       	movw	r20, r24
 256:	bd 01       	movw	r22, r26
 258:	cf 01       	movw	r24, r30
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
